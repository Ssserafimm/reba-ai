import React, { useState, useRef, useEffect } from 'react';
import { useApp } from '../context/AppContext';
import { Users, Send, Shield, Heart } from 'lucide-react';
import { ChatMessage } from '../types';

const t = {
  en: {
    title: "Support Community",
    subtitle: "A safe space to connect with others on the path to recovery",
    rulesTitle: "Community Rules",
    rules: [
      "Respect other members",
      "Do not give medical advice",
      "Support, don't judge",
      "Report inappropriate behavior"
    ],
    inputPlaceholder: "Share your thoughts with the community...",
    charCount: "characters",
    positiveMsg: "Positive message",
    you: "You",
    sampleMessages: [
      { userName: "Alex", content: "Hi everyone! Today marks 30 days sober. Feeling much better! üí™", emotionalTone: "positive" },
      { userName: "Maria", content: "Alex, that's amazing! I'm also on the recovery journey. How do you handle tough moments?", emotionalTone: "positive" },
      { userName: "Alex", content: "Maria, the main thing is not to be alone. I attend group meetings and chat here. It helps not to feel isolated.", emotionalTone: "positive" },
      { userName: "Dmitry", content: "I'm having a tough day. Really want to relapse. How do you cope with such moments?", emotionalTone: "negative" }
    ],
    aiModerator: "AI Moderator",
    aiSupport: (name: string) => `${name}, thank you for sharing. Remember, you are not alone. The community is here to support you. If you need urgent help, reach out to the crisis chat or a specialist.`,
    moderationNotice: "Messages are moderated by AI for safety."
  },
  ru: {
    title: "–°–æ–æ–±—â–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
    subtitle: "–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –Ω–∞ –ø—É—Ç–∏ –∫ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—é",
    rulesTitle: "–ü—Ä–∞–≤–∏–ª–∞ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
    rules: [
      "–£–≤–∞–∂–∞–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
      "–ù–µ –¥–∞–≤–∞–π—Ç–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤",
      "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ, –Ω–µ –æ—Å—É–∂–¥–∞–π—Ç–µ",
      "–°–æ–æ–±—â–∞–π—Ç–µ –æ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–∏"
    ],
    inputPlaceholder: "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º...",
    charCount: "—Å–∏–º–≤–æ–ª–æ–≤",
    positiveMsg: "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
    you: "–í—ã",
    sampleMessages: [
      { userName: "–ê–ª–µ–∫—Å–µ–π", content: "–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –°–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 30 –¥–Ω–µ–π –±–µ–∑ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è. –ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ! üí™", emotionalTone: "positive" },
      { userName: "–ú–∞—Ä–∏—è", content: "–ê–ª–µ–∫—Å–µ–π, —ç—Ç–æ –ø–æ—Ç—Ä—è—Å–∞—é—â–µ! –Ø —Ç–æ–∂–µ –Ω–∞ –ø—É—Ç–∏ –∫ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—é. –ö–∞–∫ —Ç—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è —Å —Ç—Ä—É–¥–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏?", emotionalTone: "positive" },
      { userName: "–ê–ª–µ–∫—Å–µ–π", content: "–ú–∞—Ä–∏—è, –≥–ª–∞–≤–Ω–æ–µ - –Ω–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π. –Ø —Ö–æ–∂—É –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏ –∑–¥–µ—Å—å –æ–±—â–∞—é—Å—å. –ü–æ–º–æ–≥–∞–µ—Ç –Ω–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º.", emotionalTone: "positive" },
      { userName: "–î–º–∏—Ç—Ä–∏–π", content: "–£ –º–µ–Ω—è —Å–µ–≥–æ–¥–Ω—è —Å–ª–æ–∂–Ω—ã–π –¥–µ–Ω—å. –û—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è —Å–æ—Ä–≤–∞—Ç—å—Å—è. –ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å —Ç–∞–∫–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏?", emotionalTone: "negative" }
    ],
    aiModerator: "AI-–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä",
    aiSupport: (name: string) => `${name}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª—Å—è. –ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –Ω–µ –æ–¥–∏–Ω. –°–æ–æ–±—â–µ—Å—Ç–≤–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å, –æ–±—Ä–∞—Ç–∏—Å—å –∫ –∫—Ä–∏–∑–∏—Å–Ω–æ–º—É —á–∞—Ç—É –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.`,
    moderationNotice: "–°–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∏—Ä—É—é—Ç—Å—è –ò–ò –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
  }
};

export default function CommunityChat() {
  const { state, dispatch } = useApp();
  const [message, setMessage] = useState('');
  const [postAnonymous, setPostAnonymous] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const tr = t[state.language];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [state.communityMessages]);

  // Sample community messages for demo
  useEffect(() => {
    if (state.communityMessages.length === 0) {
      const sampleMessages: ChatMessage[] = tr.sampleMessages.map(msg => ({
        id: crypto.randomUUID(),
        content: msg.content,
        type: 'community',
        emotionalTone: msg.emotionalTone as 'positive' | 'negative' | 'neutral' | 'crisis',
        timestamp: new Date(),
        userId: 'user1',
        userName: msg.userName
      }));

      sampleMessages.forEach(msg => {
        dispatch({ type: 'ADD_COMMUNITY_MESSAGE', payload: msg });
      });
    }
  }, []);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!message.trim()) return;

    const newMessage: ChatMessage = {
      id: crypto.randomUUID(),
      content: message.trim(),
      type: 'community',
      emotionalTone: 'neutral',
      timestamp: new Date(),
      userId: state.currentUser?.id,
      userName: postAnonymous ? (state.language === 'ru' ? '–ê–Ω–æ–Ω–∏–º' : 'Anonymous') : (state.currentUser?.name)
    };

    dispatch({ type: 'ADD_COMMUNITY_MESSAGE', payload: newMessage });
    setMessage('');

    // Simulate AI moderation response for supportive messages
    if (message.toLowerCase().includes('–ø–æ–º–æ—â—å') || message.toLowerCase().includes('—Ç—Ä—É–¥–Ω–æ')) {
      setTimeout(() => {
        const aiResponse: ChatMessage = {
          id: crypto.randomUUID(),
          content: tr.aiSupport(postAnonymous ? (state.language === 'ru' ? '–ê–Ω–æ–Ω–∏–º' : 'Anonymous') : (state.currentUser?.name) || ""),
          type: 'community',
          emotionalTone: 'positive',
          timestamp: new Date(),
          userId: 'ai-moderator',
          userName: tr.aiModerator
        };
        dispatch({ type: 'ADD_COMMUNITY_MESSAGE', payload: aiResponse });
      }, 2000);
    }
  };

  const getMessageColor = (emotionalTone: string) => {
    switch (emotionalTone) {
      case 'positive':
        return 'border-l-green-500 bg-green-50';
      case 'negative':
        return 'border-l-red-500 bg-red-50';
      case 'crisis':
        return 'border-l-red-600 bg-red-100';
      default:
        return 'border-l-blue-500 bg-blue-50';
    }
  };

  return (
    <div className="max-w-4xl mx-auto">
      <div className="bg-white rounded-lg shadow-sm">
        <div className="border-b border-gray-200 p-6">
          <div className="flex items-center">
            <Users className="w-8 h-8 text-purple-600 mr-3" />
            <div>
              <h2 className="text-2xl font-bold text-gray-900">{tr.title}</h2>
              <p className="text-gray-600">{tr.subtitle}</p>
            </div>
          </div>
        </div>

        <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 m-6">
          <div className="flex">
            <Shield className="w-5 h-5 text-yellow-400 mr-3 mt-0.5" />
            <div>
              <h3 className="text-sm font-medium text-yellow-800">{tr.rulesTitle}</h3>
              <div className="mt-2 text-sm text-yellow-700">
                <ul className="list-disc list-inside space-y-1">
                  {tr.rules.map((rule, index) => (
                    <li key={index}>{rule}</li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>

        <div className="h-96 overflow-y-auto p-6 space-y-4">
          {state.communityMessages.map((msg) => (
            <div key={msg.id} className={`border-l-4 p-4 rounded-lg ${getMessageColor(msg.emotionalTone!)}`}>
              <div className="flex items-start justify-between mb-2">
                <div className="flex items-center space-x-2">
                  <span className="font-medium text-gray-900">
                    {msg.userName === tr.aiModerator ? (
                      <div className="flex items-center">
                        <Shield className="w-4 h-4 mr-1 text-blue-600" />
                        {tr.aiModerator}
                      </div>
                    ) : (
                      msg.userName
                    )}
                  </span>
                  {msg.userId === state.currentUser?.id && (
                    <span className="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded-full">{tr.you}</span>
                  )}
                </div>
                <span className="text-xs text-gray-500">
                  {msg.timestamp.toLocaleTimeString()}
                </span>
              </div>
              <p className="text-gray-800">{msg.content}</p>
              {msg.emotionalTone === 'positive' && (
                <div className="flex items-center mt-2 text-green-600">
                  <Heart className="w-4 h-4 mr-1" />
                  <span className="text-xs">{tr.positiveMsg}</span>
                </div>
              )}
            </div>
          ))}
          <div ref={messagesEndRef} />
        </div>

        <div className="border-t border-gray-200 p-6">
          <form onSubmit={handleSubmit} className="flex space-x-4">
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none"
              placeholder={tr.inputPlaceholder}
              maxLength={500}
            />
            <button
              type="submit"
              disabled={!message.trim()}
              className="bg-purple-600 text-white px-6 py-2 rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center"
            >
              <Send className="w-4 h-4" />
            </button>
          </form>
          <div className="flex items-center mt-3">
            <input
              type="checkbox"
              id="anonymous-toggle"
              checked={postAnonymous}
              onChange={e => setPostAnonymous(e.target.checked)}
              className="accent-purple-600 w-4 h-4 rounded mr-2"
            />
            <label htmlFor="anonymous-toggle" className="text-sm text-gray-700 cursor-pointer select-none">
              {state.language === 'ru' ? '–ü–∏—Å–∞—Ç—å –∫–∞–∫ –ê–Ω–æ–Ω–∏–º' : 'Post as Anonymous'}
            </label>
          </div>
          <div className="flex items-center justify-between mt-2">
            <span className="text-xs text-gray-500">
              {message.length}/{tr.charCount}
            </span>
            <span className="text-xs text-gray-500">
              {tr.moderationNotice}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
}